}
y = c(1, 2, 3, 4, 5)
average(y)
average = function(x) {
value = sum(x) / length(x)
return(value) # return이 존재해야하는 경우가 대부분
}
y = c(1, 2, 3, 4, 5)
average(y)
x = c(5, 6, 10, 7, 12)
z = NULL
for (k in x){
z = c(z, k+3)
}
z
z <- NULL
for (k in x){
z <- c(z, k + 3)
if (k >= 10) break
}
z
z <- NULL
for (k in x) {
if (k >= 10) next
z <- c(z, k + 3)
}
z
x <- 0
while (x < 5){
x <- x + 1
}
x
r <- 3
if (r==4) {
x <- 1
} else {
x <- 3
y <- 5
}
x
y
r <- 3
if (r==4) {
x <- 1
} else if (r == 3) {
x <- 3
y <- 5
} else {
x = 3
}
}
x
if (r==4) {
x <- 1
} else if (r == 3) {
x <- 3
y <- 5
} else {
x = 3
}
x
y
if (r==4) {
x <- 1
} else if (r == 3) {
x <- 3
y <- 5
} else {
x = 7
}
x
y
ifelse(c(3, 5, 7, 9, 11) > 3, 'a', 'b')
ifelse(c(3, 5, 7, 9, 11) > 7, 'a', ifelse(c(3, 5, 7, 9, 11) > 4, 'b', 'c'))
x <- rbinom(2000, size = 50, prob = 1/5)
mean(x)
hist(x)
n <- 100
y1 <- 0.5 * x + rnorm(n)
y2 <- 5 - 0.5 * x + rnorm(n)
plot(x, y1, xlab = "X", ylab = "Y")
points(x, y2, col = "blue", pch = 20)
n <- 100
x <- runif(n, 1, 10)
y1 <- 0.5 * x + rnorm(n)
y2 <- 5 - 0.5 * x + rnorm(n)
plot(x, y1, xlab = "X", ylab = "Y")
points(x, y2, col = "blue", pch = 20)
Time <- 1:10
stock1 <- c(15, 20, 17, 10, 20, 21, 18, 23, 25, 29)
stock2 <- c(10, 18, 11, 22, 27, 12, 25, 29, 26, 23)
plot(Time, stock1, type = "b", xlab = "Time", ylab = "Stock price")
lines(Time, stock2, type = "b", col = "red", lwd = 2,
lty = 2)
plot(Time, stock1, type = "b", xlab = "Time", ylab = "Stock price")
lines(Time, stock2, type = "b", col = "red", lwd = 2,
lty = 2)
legend(8.5, 15, c("A", "B"), col = c("black", "red"),
lty = c(1, 2), lwd = c(1, 2))
x <- c(100, 250, 200)
barplot(x, names.arg = c("a", "b", "c"), ylab = "Products",
main = "Products by factory")
x <- rnorm(100)
hist(x, main = "Normal Distribution", freq = F)
lines(density(x), col = "red")
x <- rnorm(100)
y <- rnorm(100, mean = 3, sd = 2)
z <- rnorm(100, mean = -1, sd = 1.5)
boxplot(x, y, z, names = c("A", "B", "C"), col = c("blue",
"red", "green"))
boxplot(x, y, z, names = c("A", "B", "C"), col = c("blue", "red", "green"))
knitr::purl('Week 2.rmd','Week 2.R')
knitr::purl('Week 2.rmd','Week 2.R')
knitr::opts_chunk$set(echo = TRUE)
print('R')
getwd()
knitr::opts_chunk$set(echo = TRUE)
3 + 8 # 더하기
3 - 1 # 빼기
3 * 4 # 곱하기
4/2 # 나누기
5%%3  # 나머지
5%/%3 # 몫
x = 3
x = 3; x
y <- 3; y
x+y
z = x+y
z
ch = 'hello world'
ch
x = c(1, 3, 6, 10); x
x + 0.2
x[1]
x[3]
c
q
help(c)
help(filter)
?c
c
q
a1 = c(1, 2, 3)
a1
is.numeric(a1)
typeof(a1)
class(a1)
b1 = c('a', 'b', '3')
b1
is.character(b1)
typeof(b1)
class(b1)
b2 = c('1', '2', '5')
as.numeric(b2)
a1
as.character(a1)
c1 = c('a', 'b', 'a', 'a', 'b')
c1 = factor(c1) # as.factor(c1) 도 가능
c1
levels(c1)  # 팩터 레벨을 확인
is.factor(c1)
typeof(c1) # R을 팩터를 문자+수치 둘다로서 인식하는 느낌이 있다. 조금 복잡한것이 특성
class(c1)
c2 = c('11', '9', '9', '11', '5', '11', '11')
c2 = as.factor(c2); c2
as.numeric(c2)
as.numeric(as.character(c2))
c(T, TRUE, F, FALSE)
d1 = TRUE; d1
d2 = 'TRUE'; d2
'a' == 'a'
'a' != 'b'
'a' == 'b'
NA
e1 = c(1, 3, NA, 6); e1
is.na(e1)
e1 = NULL; e1
e1 = c(1, 3, NULL, 6)
e1
e1 = NULL
e1
0/0
rm(list = ls())
a1
typeof(b1)
class(b1)
b1 = c('a', 'b', '3')
b1
is.character(b1)
typeof(b1)
class(b1)
e1 = NULL
e1
a1
e1 = c(1, 3, NA, 6); e1
e1 = NULL; e1
e1
rm(e1)
e1
x = c(1, 5, 3, 12, 52)
length(x) # 벡터의 길이
x[1:5] # 인덱싱
x[1:3]
x[5]
x = c(x[1:3], 153, x[5])
x
x
x > 3
x
x > 3
x
names(x) = c('g', 'b', 'a', 'b', 'c')
x
c(1,2,3)
seq(from = -2, to = 3, by = 1) # -2에서 3까지 1 간격으로 생성, seq는 sequence를 말한다.
seq(from = 0, to = 5, by = 2) # -2에서 3까지 1 간격으로 생성, seq는 sequence를 말한다.
rep(c(1,3), 3) # rep은 repeat를 말한다.
rep(c(1,3), each = 3)
x = c(1, 3, 5, 7); y = c(1, 3, 5); z = c(1, 3)
x + y # 성분의 갯수가 배수관계가 아니면 더할 수 없다.
x + z # 배수관계면 알아서 더해준다! 이렇게 어느정도 봐주는게 R의 특징
x + x
x = c(1,2,3,4)
sum(x)
mean(x)
x = c(x, NA)
x
mean(x)
sum(x)
mean(x, na.rm = T)
sum(x, na.rm=T)
x = c(1, 2, 3, NULL, 4)
x
sum(x)
x
matrix(nrow = 2, ncol = 3)
x = 1:12
x
matrix(x, nrow = 3, ncol = 4) # default : byrow = F
matrix(x, nrow = 3, ncol = 4, byrow = T)
A = matrix(x, nrow = 3, ncol = 4)
A
length(A)
dim(A)  # row - column
4^2
sqrt(4)
log(3)
exp(2)
exp(1)
x = c(1, 2,3)
sqrt(x)
A = matrix(1:4, 2, 2)
B = matrix(2:5, 2, 2)
A
B
A*B
A%*%B
solve(A)
t(A)
eigen(A)
A = matrix(1:20, nrow = 5, ncol = 4)
A
dim(A)
rownames(A)
rownames(A) = c('a', 'b', 'c', 'd', 'e')
A
colnames(A) = c('a', 'b', 'c', 'd')
A
dim(A)
A[1:2, 3:4] # 숫자로 인덱싱하기
A
A[1:2, 3:4] # 숫자로 인덱싱하기
A[1:2, c('c', 'd')]  # 이름으로 인덱싱하기
A = matrix(1:20, nrow = 5, ncol = 4); A
apply(A, 1, sum) # 1이면 열 별로 연산
A
apply(A, 1, sum) # 1이면 열 별로 연산
apply(A, 2, sum) # 이면  별로 연산
A = matrix(1:20, nrow = 5, ncol = 4); A
apply(A, 1, sum) # 이면  별로 연산
apply(A, 1, sum) #1이면  행별로 연산
A = matrix(1:20, nrow = 5, ncol = 4); A
apply(A, 2, mean, na.rm = T) # 2이면 열별로 연산
apply(A, 2, mean, na.rm = T) # 2이면 열별로 연산
x = c(1, 3, 5)
y = matrix(1:9, 3, 3)
y = matrix(1:9, 3, 3)
x
y
rbind(x,y)
cbind(x,y)
z = matrix(11:19, 3, 3)
z
rbind(y, z)
cbind(y, z)
name = c('Kim', 'Park', 'Lee')
age = c(25, 23, 21)
male = c(T, F, T)
X = data.frame(name, age, male, stringsAsFactors = F) # character를 factor로 처리할건지. default는 R 4.0부터 F
X
cbind(name, age, male) # 행렬은 각각의 형태를 캐릭터로 통일해버렸다.
X
str(X)
summary(X)
dim(X)
X[1] # 데이터프레임
X[1:2] # 데이터프레임
X[[1]] # 벡터
X[1] # 데이터프레임
X[[1]] # 벡터
X[, 1:2]
x[1:2]
X[1:2]
X[, 1:2]
X[, 1:2]
X[1:2, ]
X$name # 열 이름을 인덱싱하는것이 편리하다.
# 숫자로 인덱싱하는 것에는 차이가 없다.
X
X$name # 열 이름을 인덱싱하는것이 편리하다.
X$name = c('Tim', 'Lee', 'Lim')
X
X = data.frame(x1 = c(6, 3, NA, 3, NA), x2 = 1:5, x3 = 7:11)
X
complete.cases(X)
X
complete.cases(X)
X[complete.cases(X), ] # 결측값이 있는 행 제거
is.na(X)
X[is.na(X)]
X[is.na(X)] = 0
X
data = mtcars
colnames(data)
str(data)
dim(data)
summary(data)
(data$mpg >= 25)
(data$gear >= 4)
(data$mpg >= 25) & (data$gear >= 4)
data[(data$mpg >= 25) & (data$gear >= 4), ]
mean
average = function(x) {
value = sum(x) / length(x)
return(value) # return이 존재해야하는 경우가 대부분
}
y = c(1, 2, 3, 4, 5)
average(y)
average = function(x) {
value = sum(x) / length(x)
value # return이 존재해야하는 경우가 대부분
}
y = c(1, 2, 3, 4, 5)
average(y)
average = function(x) {
value = sum(x) / length(x)
return(value) # return이 존재해야하는 경우가 대부분
}
y = c(1, 2, 3, 4, 5)
average(y)
x = c(5, 6, 10, 7, 12)
z = NULL
for (k in x){
z = c(z, k+3)
}
z
z <- NULL
z
for (k in x) {
z <- c(z, k + 3)
if (k >= 10) break
}
z
z <- NULL
z
for (k in x) {
z <- c(z, k + 3)
if (k >= 10) break
}
z
z <- NULL
x
for (k in x) {
if (k >= 10) next
z <- c(z, k + 3)
}
z
x
x <- 0
while (x < 5){
x <- x + 1
}
x
x <- 0
while (x < 5){
x <- x + 1
if (x > 3) break
}
x
x <- 0
repeat {
x <- x + 1
if (x >= 5) break
}
x
r <- 3
r <- 3
if (r==4) {
x <- 1
} else {
x <- 3
y <- 5
}
x
y
r <- 3
r <- 3
if (r==4) {
x <- 1
} else if (r == 3) {
x <- 3
y <- 5
} else {
x = 7
}
x
y
r <- 3
if (r==4) {
x <- 1
} else if (r == 3) {
x <- 3
y <- 5
} else {
x = 7
}
x
y
x = c(3, 5, 7, 9, 11)
x = c(3, 5, 7, 9, 11)
ifelse(x > 3, 'a', 'b')
x > 3
ifelse(x > 3, 'a', 'b')
ifelse(x > 7, 'a', 'b')
ifelse(x > 7, 'a', ifelse(x > 4, 'b', 'c'))
plot(c(0, 10), c(0, 20), type = "n", xlab = "X", ylab = "Y",
main = "Empty frame")
points(c(6, 8, 10, 6, 8, 10), c(5, 10, 15, 10, 15, 20),
col = "brown", cex = 2, pch = 20)
plot(c(0, 10), c(0, 20), type = "n", xlab = "X", ylab = "Y",
main = "Empty frame")
points(c(6, 8, 10, 6, 8, 10), c(5, 10, 15, 10, 15, 20),
col = "brown", cex = 2, pch = 20)
plot(c(0, 10), c(0, 20), type = "n", xlab = "X", ylab = "Y",
main = "Empty frame")
points(c(6, 8, 10, 6, 8, 10), c(5, 10, 15, 10, 15, 20),
col = "brown", cex = 2, pch = 20)
lines(c(0, 4, 4, 0, 0), c(5, 5, 15, 15, 5), col = "red", lwd = 2)
plot(c(0, 10), c(0, 20), type = "n", xlab = "X", ylab = "Y",
main = "Empty frame")
points(c(6, 8, 10, 6, 8, 10), c(5, 10, 15, 10, 15, 20),
col = "brown", cex = 2, pch = 20)
lines(c(0, 4, 4, 0, 0), c(5, 5, 15, 15, 5), col = "red", lwd = 2)
lines(c(1, 3, 3, 1, 1), c(7, 7, 12, 12, 7), col = "blue", lwd = 3, lty = 2)
n <- 100
x <- runif(n, 1, 10)
x
y1 <- 0.5 * x + rnorm(n)
y2 <- 5 - 0.5 * x + rnorm(n)
plot(x, y1, xlab = "X", ylab = "Y")
plot(x, y1, xlab = "X", ylab = "Y")
points(x, y2, col = "blue", pch = 20)
Time <- 1:10
stock1 <- c(15, 20, 17, 10, 20, 21, 18, 23, 25, 29)
stock2 <- c(10, 18, 11, 22, 27, 12, 25, 29, 26, 23)
plot(Time, stock1, type = "b", xlab = "Time", ylab = "Stock price")
lines(Time, stock2, type = "b", col = "red", lwd = 2, lty = 2)
legend(8.5, 15, c("A", "B"), col = c("black", "red"),
lty = c(1, 2), lwd = c(1, 2))
x <- c(100, 250, 200)
barplot(x, names.arg = c("a", "b", "c"), ylab = "Products", main = "Products by factory")
x <- rnorm(100)
hist(x, main = "Normal Distribution", freq = F)
lines(density(x), col = "red")
x <- rnorm(100)
y <- rnorm(100, mean = 3, sd = 2)
z <- rnorm(100, mean = -1, sd = 1.5)
boxplot(x, y, z, names = c("A", "B", "C"), col = c("blue", "red", "green"))
x <- c(6, 3, 4, 1, 5)
min(x)
max(x)
which.min(x)
x[which.min(x)]
x <- seq(from = -3, to = 3, by = 0.01)
x
y <- dnorm(x, mean = 0, sd = 1, log = FALSE)
plot(y)
plot(x, y)
x <- rbinom(2000, size = 50, prob = 1/5)
mean(x)
hist(x)
mean(x)
hist(x)
pbinom(2, 10, 0.3) - pbinom(1, 10, 0.3) # P(X <= 2) - P(X <= 1) == P(X == 2)
qnorm(0.975, 0, 1)
qnorm(0.975, 0, 1)
qnorm(0.025, 0, 1)
pnorm(1.645, 0, 1)
library(dplyr)
house = data.table::fread('house-1.csv')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
