knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('pic/correlation.png')
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('pic/bestsubset.png')
knitr::include_graphics('pic/biased.png')
knitr::include_graphics('pic/ridge.png')
knitr::include_graphics('pic/ridge.png')
knitr::include_graphics('pic/ridge_solution.png')
knitr::include_graphics('pic/ridge_solution.png')
knitr::include_graphics('pic/lasso.png')
knitr::include_graphics('pic/lasso_solution.png')
salary.reg <- lm(Salary ~ ., data = data)
library(data.table)
data = fread('2017-18_NBA_salary.csv')
data <- data[complete.cases(data), ] # 결측치 제거
data <- data[-c(223:224), ] #겹치는 선수 삭제
data$Player <- NULL
data$Tm <- NULL
data$NBA_Country <- NULL
data = data %>% select('Salary', 'NBA_DraftNumber', 'Age', 'MP', 'PER',
`TS%`, `DRB%`, VORP, G, OBPM, DBPM, BPM, OWS, DWS, WS, `AST%`, `STL%`)
library(tidyverse)
data = data %>% select('Salary', 'NBA_DraftNumber', 'Age', 'MP', 'PER',
`TS%`, `DRB%`, VORP, G, OBPM, DBPM, BPM, OWS, DWS, WS, `AST%`, `STL%`)
salary.reg <- lm(Salary ~ ., data = data)
summary(salary.reg2)  ### adj R^2 = 0.5893
summary(salary.reg)
library(ggcorrplot)
corr <- cor(data) # 상관계수 행렬
p_mat <- cor_pmat(data) # 상관계수 p-value 행렬
ggcorrplot(corr, hc.order = T, type = "lower",
outline.color = "white", ggtheme = ggplot2::theme_gray(),
colors = c("#6D9EC1", "white", "#E46726"), lab = T, p.mat = p_mat,
insig = "blank", lab_size = 2, tl.cex = 7)
library(leaps)
best_subset = regsubsets(Salary ~ ., data = data, nvmax = 13)
bs = best_subset %>% summary
bs
bs$bic
bs$outmat
bs
data %>% dim
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
par(mfrow = c(1, 1))
coef(best_subset, 5)
best_lm_fit = lm(Salary ~ NBA_DraftNumber + Age + MP + VORP + G, data = train)
best_lm_fit = lm(Salary ~ NBA_DraftNumber + Age + MP + VORP + G, data = data)
summary(best_lm_fit)
forward_selection = regsubsets(Salary ~ ., data = data, nvmax = 13, method = "forward")
summary(forward_selection)
fs = summary(forward_selection)
plot(fs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(fs$bic)
points(l, fs$bic[l], col = "red", cex = 2, pch = 20)
plot(fs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(fs$bic)
points(l, fs$bic[l], col = "red", cex = 2, pch = 20)
coef(forward_selection, 5)
backward_selection = regsubsets(Salary ~ ., data = train, nvmax = 13, method = "forward")
backward_selection = regsubsets(Salary ~ ., data = data, nvmax = 13, method = "forward")
summary(backward_selection)
coef(backward_selection, 5)
coef(forward_selection, 5)
coef(backward_selection, 5)
bs = best_subset %>% summary
bs
best_lm_fit = lm(Salary ~ NBA_DraftNumber + Age + MP + WS + G, data = data)
summary(best_lm_fit)
ridge_fit1 = glmnet(y~., alpha = 0, lambda = 0)
library(glmnet)
ridge_fit1 = glmnet(y~., alpha = 0, lambda = 0)
x = data %>% select(-Salary)
data_y = data %>% select(Salary)
data_x = data %>% select(-Salary)
ridge_fit1 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 0)
data_x = data %>% select(-Salary)
data_y = data %>% select(Salary) %>% unlist %>% as.vector
ridge_fit1 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 0)
data_x = data %>% select(-Salary) %>% model.matrix()
data_x = data %>% select(-Salary) %>% as.matrix %>% model.matrix()
data_x = model.matrix(Salary ~ ., data = data)[,-1]
data_y = data$Salary
ridge_fit1 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 0)
ridge_fit1
ridge_fit1 %>% summary
ridge_fit1$beta
data$Salary = data$Salary^0.22
best_subset = regsubsets(Salary ~ ., data = data, nvmax = 13)
bs = best_subset %>% summary
bs
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
par(mfrow = c(1, 1))
bs
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
par(mfrow = c(1, 1))
coef(best_subset, 5)
best_lm_fit = lm(Salary ~ NBA_DraftNumber + Age + MP + `DRB%` + G, data = data)
summary(best_lm_fit)
forward_selection = regsubsets(Salary ~ ., data = data, nvmax = 13, method = "forward")
summary(forward_selection)
fs = summary(forward_selection)
plot(fs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(fs$bic)
points(l, fs$bic[l], col = "red", cex = 2, pch = 20)
coef(forward_selection, 5)
backward_selection = regsubsets(Salary ~ ., data = data, nvmax = 13, method = "forward")
summary(backward_selection)
coef(backward_selection, 5)
data_x = model.matrix(Salary ~ ., data = data)[,-1]
data_y = data$Salary
ridge_fit1 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 0)
ridge_fit1$beta
lm_fit1 = lm(Salary ~ ., data = data)
lm_fit1$coefficients
ridge_fit1$beta
ridge_fit2 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 1)
ridge_fit2$beta
ridge_fit2 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 3)
ridge_fit2$beta
ridge_fit2 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 1)
ridge_fit2$beta
ridge_fit3 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 10)
ridge_fit3$beta
ridge_fit4 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 1000)
ridge_fit4$beta
ridge_fit4$beta %>% as.vector
cbind(ridge_fit1$beta, ridge_fit2$beta, ridge_fit3$beta, ridge_fit4$beta)
ridge_fit5 = glmnet(x = data_x, y = data_y, alpha = 0, lambda = 10^7)
cbind(ridge_fit1$beta, ridge_fit2$beta, ridge_fit3$beta, ridge_fit4$beta, ridge_fit5$beta)
lasso_fit1 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 0.1)
lasso_fit2 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 1)
lasso_fit3 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 10)
lasso_fit4 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 1000)
lasso_fit5 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 10^7)
cbind(lasso_fit1$beta, lasso_fit2$beta, lasso_fit3$beta, lasso_fit4$beta, lasso_fit5$beta)
lasso_fit1 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 0.01)
lasso_fit2 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 0.1)
lasso_fit3 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 1)
lasso_fit4 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 10)
lasso_fit5 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 100)
cbind(lasso_fit1$beta, lasso_fit2$beta, lasso_fit3$beta, lasso_fit4$beta, lasso_fit5$beta)
lasso_fit1 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 0.001)
lasso_fit2 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 0.01)
lasso_fit3 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 0.1)
lasso_fit4 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 1)
lasso_fit5 = glmnet(x = data_x, y = data_y, alpha = 1, lambda = 10)
cbind(lasso_fit1$beta, lasso_fit2$beta, lasso_fit3$beta, lasso_fit4$beta, lasso_fit5$beta)
