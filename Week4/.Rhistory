knitr::opts_chunk$set(echo = TRUE)
storage_mat <- matrix(nrow = N, ncol = 2)
N = 10000
storage_mat <- matrix(nrow = N, ncol = 2)
for (k in 1:10000) {
x <- rnorm(35, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qt(0.975, 24) / sqrt(25) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qt(0.975, 24) / sqrt(25) #upper bound
}
set.seed(0)
mu <- 1
sigma <- 2
N = 10000
storage_mat <- matrix(nrow = N, ncol = 2)
for (k in 1:10000) {
x <- rnorm(35, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qt(0.975, 24) / sqrt(25) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qt(0.975, 24) / sqrt(25) #upper bound
}
head(storage_mat)
mean(storage_mat[, 1] < 1 & storage_mat[, 2] > 1)
set.seed(0)
mu <- 1
sigma <- 2
N = 10000
storage_mat <- matrix(nrow = N, ncol = 2)
for (k in 1:10000) {
x <- rnorm(35, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qt(0.975, 34) / sqrt(35) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qt(0.975, 34) / sqrt(35) #upper bound
}
head(storage_mat)
mean(storage_mat[, 1] < 1 & storage_mat[, 2] > 1)
# z검정 사용
for (k in 1:10000) {
x <- rnorm(25, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qnorm(0.975) / sqrt(35) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qnorm(0.975) / sqrt(35) #upper bound
}
# z검정 사용
for (k in 1:10000) {
x <- rnorm(25, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qnorm(0.975) / sqrt(35) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qnorm(0.975) / sqrt(35) #upper bound
}
mean(storage_mat[, 1] < 1 & storage_mat[, 2] > 1)
# z검정 사용
for (k in 1:10000) {
x <- rnorm(35, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qnorm(0.975) / sqrt(35) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qnorm(0.975) / sqrt(35) #upper bound
}
mean(storage_mat[, 1] < 1 & storage_mat[, 2] > 1)
set.seed(0)
mu <- 1
sigma <- 2
N = 10000
storage_mat <- matrix(nrow = N, ncol = 2)
for (k in 1:10000) {
x <- rnorm(65, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qt(0.975, 64) / sqrt(65) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qt(0.975, 64) / sqrt(65) #upper bound
}
head(storage_mat)
mean(storage_mat[, 1] < 1 & storage_mat[, 2] > 1)
for (k in 1:10000) {
x <- rnorm(65, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qnorm(0.975) / sqrt(65) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qnorm(0.975) / sqrt(65) #upper bound
}
mean(storage_mat[, 1] < 1 & storage_mat[, 2] > 1)
set.seed(0)
mu <- 1
sigma <- 2
N = 10000
storage_mat <- matrix(nrow = N, ncol = 2)
for (k in 1:10000) {
x <- rnorm(25, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qt(0.975, 24) / sqrt(25) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qt(0.975, 24) / sqrt(25) #upper bound
}
head(storage_mat)
mean(storage_mat[, 1] < 1 & storage_mat[, 2] > 1)
# z검정 사용
for (k in 1:10000) {
x <- rnorm(25, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qnorm(0.975) / sqrt(25) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qnorm(0.975) / sqrt(25) #upper bound
}
# z검정 사용
for (k in 1:10000) {
x <- rnorm(25, mu, sigma)
storage_mat[k, 1] <- mean(x) - sd(x) * qnorm(0.975) / sqrt(25) #lower bound
storage_mat[k, 2] <- mean(x) + sd(x) * qnorm(0.975) / sqrt(25) #upper bound
}
mean(storage_mat[, 1] < 1 & storage_mat[, 2] > 1)
set.seed(42)
mu <- 1
sigma <- 2
x <- rnorm(25, mu, sigma)
?t.test
set.seed(0)
x = rnorm(30, 30, 3)
y = rnorm(40, 20, 3)
set.seed(42)
x = rnorm(30, 30, 3)
y = rnorm(40, 20, 3)
set.seed(42)
x = rnorm(30, 30, 3)
y = rnorm(40, 20, 3)
t.test(x, y, alternative = 'two-sided', # greater, less
mu = 0, # difference 지정
paired = F, # 대응표본검정일때 T
var.equal = T) # 등분산 여부
t.test(x, y, alternative = 'two.sided', # greater, less
mu = 0, # difference 지정
paired = F, # 대응표본검정일때 T
var.equal = T) # 등분산 여부
set.seed(42)
x = rnorm(30, 30, 3)
y = rnorm(40, 20, 5)
t.test(x, y, alternative = 'two.sided', # greater, less
mu = 0, # difference 지정
paired = F, # 대응표본검정일때 T
var.equal = F) # 등분산 여부
t.test(x, y, alternative = 'less', # greater, less
mu = 0, # difference 지정
paired = F, # 대응표본검정일때 T
var.equal = F) # 등분산 여부
t.test(x, y, alternative = 'two.sided', # greater, less
mu = 0, # difference 지정
paired = F, # 대응표본검정일때 T
var.equal = F) # 등분산 여부
?var.test
```{r}
set.seed(42)
x = rnorm(30, 30, 3)
y = rnorm(40, 20, 5)
var.test(x, y, ratio = 1,
alternative = 'two.sided')
set.seed(42)
x = rnorm(30, 30, 2)
y = rnorm(40, 20, 5)
var.test(x, y, ratio = 1,
alternative = 'two.sided')
set.seed(42)
y = rnorm(100, 20, 5)
var.test(x, y, ratio = 1,
alternative = 'two.sided')
set.seed(42)
x = rnorm(100, 30, 4.5)
y = rnorm(100, 20, 5)
var.test(x, y, ratio = 1,
alternative = 'two.sided')
set.seed(42)
x = rnorm(100, 30, 4.2)
y = rnorm(100, 20, 5)
var.test(x, y, ratio = 1,
alternative = 'two.sided')
set.seed(42)
x = rnorm(100, 30, 4)
y = rnorm(100, 20, 5)
var.test(x, y, ratio = 1,
alternative = 'two.sided')
set.seed(42)
x = rnorm(100, 30, 4)
y = rnorm(100, 20, 5)
var.test(x, y, ratio = 1,
alternative = 'two.sided')
set.seed(42)
x = rnorm(100, 30, 3)
y = rnorm(100, 20, 5)
var.test(x, y, ratio = 1,
alternative = 'two.sided')
View(var.test)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('pic/K-076.png')
knitr::include_graphics('pic/K-077.png')
knitr::include_graphics('pic/K-081.png')
```{r, echo = FALSE, fig.cap = 'loss function of LSE', fig.align='center', out.width='70%'}
knitr::include_graphics('pic/K-082.png')
knitr::include_graphics('pic/K-083.png')
knitr::include_graphics('pic/K-084.png')
knitr::include_graphics('pic/K-085.png')
knitr::include_graphics('pic/K-086.png')
knitr::include_graphics('pic/K-087.png')
knitr::include_graphics('pic/K-088.png')
